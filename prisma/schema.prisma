generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id           String    @id @default(cuid())
  username     String    @unique
  password     String
  isSuperAdmin Boolean   @default(false)
  accounts     Account[]
}

model Item {
  id           Int        @id @default(autoincrement())
  name         String
  brand        String
  barcode      String     @unique
  barcodeImage String
  vendor       String
  price        Int
  image        String
  quantity     Int        @default(0)
  purchasedAt  DateTime   @default(now())
  issued       Int        @default(0)
  Category     Category   @relation(fields: [categoryName], references: [name])
  categoryName String
  Issuance     Issuance[]
}

model Category {
  name  String @id @unique
  items Item[]
}

model Branch {
  name       String      @id @unique
  recipients Recipient[]
}

model Recipient {
  id         Int        @id
  name       String
  branchName String
  issuances  Issuance[]
  Branch     Branch     @relation(fields: [branchName], references: [name])
}

model Issuance {
  id          Int       @id @default(autoincrement())
  itemId      Int
  recipientId Int
  quantity    Int
  returned    Boolean   @default(false)
  issuedAt    DateTime  @default(now())
  recipient   Recipient @relation(fields: [recipientId], references: [id])
  item        Item      @relation(fields: [itemId], references: [id])
}
